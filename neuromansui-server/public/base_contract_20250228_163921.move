module temp_addr::my_module {

    // Allow duplicate alias warnings from the Sui framework
    #[allow(duplicate_alias)]
    
    // Import necessary modules from Sui and standard library.
    use sui::object;
    use sui::tx_context;
    use std::signer;

    // AdminCap is a capability resource that grants admin privileges.
    // Only the holder of this resource is allowed to perform administrative operations like minting or burning tokens.
    resource struct AdminCap has key {
        // No fields needed; this is a marker resource.
    }

    // Token is a basic token object.
    // It stores a unique identifier, the owner's address, and the token balance.
    // The abilities "key" and "store" are explicitly declared to avoid requiring the 'drop' ability for fields.
    resource struct Token has key, store {
        id: object::UID,
        owner: address,
        balance: u64,
    }

    ///////////////////////////////////////////////////////////////////////////
    // Administrative functions
    ///////////////////////////////////////////////////////////////////////////

    // Initialize the admin capability.
    // The caller (a signer) becomes the admin by receiving an AdminCap resource.
    public fun init_admin(admin: &signer, ctx: &mut tx_context::TxContext): AdminCap {
        // For simplicity, any caller can call this function to obtain an AdminCap.
        // In production, initialization should be restricted or performed only once.
        AdminCap {}
    }

    // Mint creates a new Token resource with the specified amount for the given recipient.
    // Only an admin (holder of AdminCap) can mint tokens.
    // The AdminCap is taken in and then returned to ensure continuous admin control.
    public fun mint(recipient: address, amount: u64, admin_cap: AdminCap, ctx: &mut tx_context::TxContext): (Token, AdminCap) {
        // Create a new token using a unique identifier generated by the Sui framework.
        let new_token = Token {
            id: object::new_uid(ctx),
            owner: recipient,
            balance: amount,
        };
        (new_token, admin_cap)
    }

    // Burn destroys a Token resource.
    // Only an admin (holder of AdminCap) can burn tokens.
    // The burned token is simply consumed, and the AdminCap is returned.
    public fun burn(token: Token, admin_cap: AdminCap, ctx: &mut tx_context::TxContext): AdminCap {
        // The token is consumed (dropped) when this function ends.
        admin_cap
    }

    ///////////////////////////////////////////////////////////////////////////
    // User functions
    ///////////////////////////////////////////////////////////////////////////

    // Transfer allows the owner of a token to transfer it to another address.
    // The sender must provide their signature, and ownership is verified against the token's owner.
    public fun transfer(token: Token, recipient: address, sender: &signer, ctx: &mut tx_context::TxContext): Token {
        // Retrieve the sender's address using the standard Signer module.
        let sender_addr = signer::address_of(sender);
        // Ensure that the sender is the owner of the token.
        assert!(sender_addr == token.owner, 0);
        
        // Since the token is passed by value, it is mutable within this function.
        let mut t = token;
        t.owner = recipient;
        t
    }
}