{
  "version": "1.0",
  "created_at": "2025-02-26T22:00:37.866046",
  "description": "Sui Move compiler error prediction dataset",
  "examples": [
    {
      "input": "module my_module {\n\n    ////////////////////////////////////////////////////////////////////////////\n    // Import statements\n    ////////////////////////////////////////////////////////////////////////////\n    use std::signer;\n    use std::string;\n    use sui::object::{UID, new_uid};\n\n    ////////////////////////////////////////////////////////////////////////////\n    // Resource: NFTAdmin\n    // This resource acts as an administrative capability for minting NFTs.\n    ////////////////////////////////////////////////////////////////////////////\n    resource struct NFTAdmin has key, store {\n        // The administrator's address.\n        admin: address,\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // Resource: NFT\n    // This resource represents a Non-Fungible Token (NFT) with associated metadata.\n    ////////////////////////////////////////////////////////////////////////////\n    resource struct NFT has key, store {\n        // Unique identifier automatically generated for each NFT.\n        id: UID,\n        // NFT metadata fields.\n        name: vector<u8>,\n        description: vector<u8>,\n        image_url: vector<u8>,\n        // Owner address of the NFT.\n        owner: address,\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // Entry Function: init\n    // This function initializes the NFT collection by creating an NFTAdmin resource.\n    ////////////////////////////////////////////////////////////////////////////\n    public entry fun init(admin: &signer): NFTAdmin {\n        let admin_addr = signer::address_of(admin);\n        // Create and return the administrative capability.\n        NFTAdmin { admin: admin_addr }\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // Entry Function: mint_nft\n    // Mints a new NFT with the provided metadata and assigns it to the recipient.\n    // Only the account holding the NFTAdmin resource (i.e. the administrator) \n    // is authorized to mint NFTs.\n    ////////////////////////////////////////////////////////////////////////////\n    public entry fun mint_nft(\n        admin_cap: &NFTAdmin,       // The NFT admin resource for access control.\n        admin: &signer,             // The admin signer must sign the transaction.\n        name: vector<u8>,\n        description: vector<u8>,\n        image_url: vector<u8>,\n        recipient: address          // Recipient address for the minted NFT.\n    ): NFT {\n        // Ensure that only the administrator can call mint_nft.\n        assert!(signer::address_of(admin) == admin_cap.admin, 1);\n        // Generate a new unique identifier for the NFT.\n        let new_id = new_uid(admin);\n        // Instantiate and return the new NFT resource with the provided metadata.\n        NFT {\n            id: new_id,\n            name,\n            description,\n            image_url,\n            owner: recipient,\n        }\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // Entry Function: transfer\n    // Transfers NFT ownership to a new recipient.\n    // Only the current owner (i.e. the signer) can initiate the transfer.\n    ////////////////////////////////////////////////////////////////////////////\n    public entry fun transfer(\n        nft: NFT,\n        recipient: address,\n        signer: &signer\n    ): NFT {\n        // Verify that the signer is the current owner of the NFT.\n        let sender = signer::address_of(signer);\n        assert!(nft.owner == sender, 2);\n        // Create a new NFT instance with updated ownership and carry over other fields.\n        NFT {\n            id: nft.id,\n            name: nft.name,\n            description: nft.description,\n            image_url: nft.image_url,\n            owner: recipient,\n        }\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // Entry Function: update_metadata\n    // Updates the metadata fields of an NFT.\n    // Only the current owner is allowed to update its metadata.\n    ////////////////////////////////////////////////////////////////////////////\n    public entry fun update_metadata(\n        nft: NFT,\n        signer: &signer,\n        new_name: vector<u8>,\n        new_description: vector<u8>,\n        new_image_url: vector<u8>\n    ): NFT {\n        // Check that the signer is the current owner of the NFT.\n        let sender = signer::address_of(signer);\n        assert!(nft.owner == sender, 3);\n        // Update and return the NFT with new metadata.\n        NFT {\n            id: nft.id,\n            name: new_name,\n            description: new_description,\n            image_url: new_image_url,\n            owner: nft.owner,\n        }\n    }\n}",
      "output": "UPDATING GIT DEPENDENCY https://github.com/MystenLabs/sui.git\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING TempContract\nerror[E02004]: invalid 'module' declaration\n  \u250c\u2500 ./sources/temp_contract.move:1:8\n  \u2502\n1 \u2502 module my_module {\n  \u2502        ^^^^^^^^^ Invalid module declaration. The module does not have a specified address. Either declare it inside of an 'address <address> {' block or declare it with an address 'module <address>::my_module''\n\nerror[E03002]: unbound module\n  \u250c\u2500 ./sources/temp_contract.move:6:9\n  \u2502\n6 \u2502     use std::signer;\n  \u2502         ^^^^^^^^^^^ Invalid 'use'. Unbound module: 'std::signer'\n\nwarning[W09001]: unused alias\n  \u250c\u2500 ./sources/temp_contract.move:7:14\n  \u2502\n7 \u2502     use std::string;\n  \u2502              ^^^^^^ Unused 'use' of alias 'string'. Consider removing it\n  \u2502\n  = This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nwarning[W02021]: duplicate alias\n  \u250c\u2500 ./sources/temp_contract.move:8:23\n  \u2502\n8 \u2502     use sui::object::{UID, new_uid};\n  \u2502                       ^^^ Unnecessary alias 'UID' for module member 'sui::object::UID'. This alias is provided by default\n  \u2502\n  = This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E03003]: unbound module member\n  \u250c\u2500 ./sources/temp_contract.move:8:28\n  \u2502\n8 \u2502     use sui::object::{UID, new_uid};\n  \u2502                            ^^^^^^^ Invalid 'use'. Unbound member 'new_uid' in module 'sui::object'\n  \u2502\n  \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:5:13\n  \u2502\n5 \u2502 module sui::object;\n  \u2502             ------ Module 'sui::object' declared here\n\nerror[E01002]: unexpected token\n   \u250c\u2500 ./sources/temp_contract.move:14:5\n   \u2502\n14 \u2502     resource struct NFTAdmin has key, store {\n   \u2502     ^^^^^^^^\n   \u2502     \u2502\n   \u2502     Unexpected 'resource'\n   \u2502     Expected a module member: 'spec', 'use', 'friend', 'const', 'fun', 'struct', or 'enum'\n\nerror[E01003]: invalid modifier\n   \u250c\u2500 ./sources/temp_contract.move:14:14\n   \u2502\n14 \u2502     resource struct NFTAdmin has key, store {\n   \u2502              ^^^^^^ Invalid struct declaration. Internal struct declarations are not yet supported\n   \u2502\n   = Visibility annotations are required on struct declarations from the Move 2024 edition onwards.\n\nerror[Sui E02007]: invalid object declaration\n   \u250c\u2500 ./sources/temp_contract.move:16:9\n   \u2502\n14 \u2502     resource struct NFTAdmin has key, store {\n   \u2502                                  --- The 'key' ability is used to declare objects in Sui\n15 \u2502         // The administrator's address.\n16 \u2502         admin: address,\n   \u2502         ^^^^^ Invalid object 'NFTAdmin'. Structs with the 'key' ability must have 'id: sui::object::UID' as their first field\n\nerror[E01002]: unexpected token\n   \u250c\u2500 ./sources/temp_contract.move:23:5\n   \u2502\n23 \u2502     resource struct NFT has key, store {\n   \u2502     ^^^^^^^^\n   \u2502     \u2502\n   \u2502     Unexpected 'resource'\n   \u2502     Expected a module member: 'spec', 'use', 'friend', 'const', 'fun', 'struct', or 'enum'\n\nerror[E01003]: invalid modifier\n   \u250c\u2500 ./sources/temp_contract.move:23:14\n   \u2502\n23 \u2502     resource struct NFT has key, store {\n   \u2502              ^^^^^^ Invalid struct declaration. Internal struct declarations are not yet supported\n   \u2502\n   = Visibility annotations are required on struct declarations from the Move 2024 edition onwards.\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:38:12\n   \u2502\n14 \u2502     resource struct NFTAdmin has key, store {\n   \u2502                     -------- To satisfy the constraint, the 'drop' ability would need to be added here\n   \u00b7\n38 \u2502     public entry fun init(admin: &signer): NFTAdmin {\n   \u2502            ^^^^^                           -------- The type '0x1::my_module::NFTAdmin' does not have the ability 'drop'\n   \u2502            \u2502                                \n   \u2502            Invalid return type for entry function 'init'\n\nerror[Sui E02003]: invalid 'init' function\n   \u250c\u2500 ./sources/temp_contract.move:38:22\n   \u2502\n38 \u2502     public entry fun init(admin: &signer): NFTAdmin {\n   \u2502     ------           ^^^^ Invalid 'init' function declaration\n   \u2502     \u2502                 \n   \u2502     'init' functions must be internal to their module\n\nerror[Sui E02003]: invalid 'init' function\n   \u250c\u2500 ./sources/temp_contract.move:38:22\n   \u2502\n38 \u2502     public entry fun init(admin: &signer): NFTAdmin {\n   \u2502            -----     ^^^^ Invalid 'init' function declaration\n   \u2502            \u2502          \n   \u2502            'init' functions cannot be 'entry' functions\n\nerror[Sui E02003]: invalid 'init' function\n   \u250c\u2500 ./sources/temp_contract.move:38:22\n   \u2502\n38 \u2502     public entry fun init(admin: &signer): NFTAdmin {\n   \u2502                      ^^^^        ------- 'init' functions must have their last parameter as '&sui::tx_context::TxContext' or '&mut sui::tx_context::TxContext'\n   \u2502                      \u2502            \n   \u2502                      Invalid 'init' function declaration\n\nerror[Sui E02003]: invalid 'init' function\n   \u250c\u2500 ./sources/temp_contract.move:38:22\n   \u2502\n38 \u2502     public entry fun init(admin: &signer): NFTAdmin {\n   \u2502                      ^^^^                  -------- 'init' functions must have a return type of '()'\n   \u2502                      \u2502                      \n   \u2502                      Invalid 'init' function declaration\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:38:27\n   \u2502\n38 \u2502     public entry fun init(admin: &signer): NFTAdmin {\n   \u2502                           ^^^^^ Unused parameter 'admin'. Consider removing or prefixing with an underscore: '_admin'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:39:26\n   \u2502\n39 \u2502         let admin_addr = signer::address_of(admin);\n   \u2502                          ^^^^^^ Could not resolve the name 'signer'\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:50:12\n   \u2502\n23 \u2502     resource struct NFT has key, store {\n   \u2502                     --- To satisfy the constraint, the 'drop' ability would need to be added here\n   \u00b7\n50 \u2502     public entry fun mint_nft(\n   \u2502            ^^^^^ Invalid return type for entry function 'mint_nft'\n   \u00b7\n57 \u2502     ): NFT {\n   \u2502        --- The type '0x1::my_module::NFT' does not have the ability 'drop'\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:59:17\n   \u2502\n59 \u2502         assert!(signer::address_of(admin) == admin_cap.admin, 1);\n   \u2502                 ^^^^^^ Could not resolve the name 'signer'\n\nerror[E03005]: unbound unscoped name\n   \u250c\u2500 ./sources/temp_contract.move:61:22\n   \u2502\n61 \u2502         let new_id = new_uid(admin);\n   \u2502                      ^^^^^^^ Unbound function 'new_uid' in current scope\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:77:12\n   \u2502\n23 \u2502     resource struct NFT has key, store {\n   \u2502                     --- To satisfy the constraint, the 'drop' ability would need to be added here\n   \u00b7\n77 \u2502     public entry fun transfer(\n   \u2502            ^^^^^ Invalid return type for entry function 'transfer'\n   \u00b7\n81 \u2502     ): NFT {\n   \u2502        --- The type '0x1::my_module::NFT' does not have the ability 'drop'\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:80:9\n   \u2502\n80 \u2502         signer: &signer\n   \u2502         ^^^^^^ Unused parameter 'signer'. Consider removing or prefixing with an underscore: '_signer'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:83:22\n   \u2502\n83 \u2502         let sender = signer::address_of(signer);\n   \u2502                      ^^^^^^ Could not resolve the name 'signer'\n\nerror[E05001]: ability constraint not satisfied\n   \u250c\u2500 ./sources/temp_contract.move:87:17\n   \u2502\n25 \u2502         id: UID,\n   \u2502             --- The type 'sui::object::UID' does not have the ability 'copy'\n   \u00b7\n87 \u2502             id: nft.id,\n   \u2502                 ^^^^^^ Invalid implicit copy of field 'id' without the 'copy' ability\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- To satisfy the constraint, the 'copy' ability would need to be added here\n\nerror[Sui E02002]: invalid 'entry' function signature\n    \u250c\u2500 ./sources/temp_contract.move:100:12\n    \u2502\n 23 \u2502     resource struct NFT has key, store {\n    \u2502                     --- To satisfy the constraint, the 'drop' ability would need to be added here\n    \u00b7\n100 \u2502     public entry fun update_metadata(\n    \u2502            ^^^^^ Invalid return type for entry function 'update_metadata'\n    \u00b7\n106 \u2502     ): NFT {\n    \u2502        --- The type '0x1::my_module::NFT' does not have the ability 'drop'\n\nwarning[W09002]: unused variable\n    \u250c\u2500 ./sources/temp_contract.move:102:9\n    \u2502\n102 \u2502         signer: &signer,\n    \u2502         ^^^^^^ Unused parameter 'signer'. Consider removing or prefixing with an underscore: '_signer'\n    \u2502\n    = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E03006]: unexpected name in this position\n    \u250c\u2500 ./sources/temp_contract.move:108:22\n    \u2502\n108 \u2502         let sender = signer::address_of(signer);\n    \u2502                      ^^^^^^ Could not resolve the name 'signer'\n\nerror[E05001]: ability constraint not satisfied\n    \u250c\u2500 ./sources/temp_contract.move:112:17\n    \u2502\n 25 \u2502         id: UID,\n    \u2502             --- The type 'sui::object::UID' does not have the ability 'copy'\n    \u00b7\n112 \u2502             id: nft.id,\n    \u2502                 ^^^^^^ Invalid implicit copy of field 'id' without the 'copy' ability\n    \u2502\n    \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n    \u2502\n 69 \u2502 public struct UID has store {\n    \u2502               --- To satisfy the constraint, the 'copy' ability would need to be added here\n\n",
      "metadata": {
        "iteration": 1,
        "timestamp": 1740635751.9966521,
        "error_stats": {
          "errors": 28,
          "compiler_warnings": 5,
          "linter_warnings": 0
        },
        "error_codes": {
          "N04002": {
            "count": 1,
            "message": "invalid 'module' declaration",
            "level": "NonblockingError"
          },
          "E02003": {
            "count": 1,
            "message": "unbound module",
            "level": "BlockingError"
          },
          "W01009": {
            "count": 1,
            "message": "unused alias",
            "level": "Warning"
          },
          "W21002": {
            "count": 1,
            "message": "duplicate alias",
            "level": "Warning"
          },
          "E03003": {
            "count": 1,
            "message": "unbound module member",
            "level": "BlockingError"
          },
          "N02001": {
            "count": 2,
            "message": "unexpected token",
            "level": "NonblockingError"
          },
          "N03001": {
            "count": 2,
            "message": "invalid modifier",
            "level": "NonblockingError"
          },
          "N07002": {
            "count": 1,
            "message": "invalid object declaration",
            "level": "NonblockingError"
          },
          "N02002": {
            "count": 4,
            "message": "invalid 'entry' function signature",
            "level": "NonblockingError"
          },
          "N03002": {
            "count": 4,
            "message": "invalid 'init' function",
            "level": "NonblockingError"
          },
          "W02009": {
            "count": 3,
            "message": "unused variable",
            "level": "Warning"
          },
          "E06003": {
            "count": 4,
            "message": "unexpected name in this position",
            "level": "BlockingError"
          },
          "E05003": {
            "count": 1,
            "message": "unbound unscoped name",
            "level": "BlockingError"
          },
          "N01005": {
            "count": 2,
            "message": "ability constraint not satisfied",
            "level": "NonblockingError"
          }
        }
      }
    },
    {
      "input": "// The following Sui Move contract implements a simple NFT collection with minting,\n// transfer and metadata update functionalities. The contract defines two resources:\n// NFTAdmin (which grants minting authority) and NFT (which represents an individual NFT).\n// Key design decisions:\n// \u2022 Both NFTAdmin and NFT resources have the abilities key, store, and drop, so that they can be used as Sui objects.\n// \u2022 The create_admin function creates an NFTAdmin object and assigns minting authority to the admin (the transaction sender).\n// \u2022 The mint_nft function checks that only the authorized admin can mint new NFTs.\n// \u2022 The transfer and update_metadata functions operate on NFT objects. In Sui, ownership is managed by the runtime,\n//   so simply moving or returning an object triggers an ownership change.\n// \u2022 The contract uses the transaction context (TxContext) to generate unique IDs (UID) and to obtain the sender's address.\n\nmodule 0x0::my_module {\n    // Import the TxContext which provides the transaction sender and UID generation functionality.\n    use sui::tx_context::TxContext;\n    // Import UID to serve as a unique identifier for Sui objects.\n    use sui::object::UID;\n\n    // NFTAdmin has the minting authority.\n    resource struct NFTAdmin has key, store, drop {\n        // For Sui objects, the first field must be a unique identifier.\n        id: UID,\n        // Administrator's address.\n        admin: address,\n    }\n\n    // NFT represents a non-fungible token with metadata fields.\n    resource struct NFT has key, store, drop {\n        // Unique identifier provided by the Sui framework.\n        id: UID,\n        // The NFT's name.\n        name: vector<u8>,\n        // The NFT's description.\n        description: vector<u8>,\n        // URL for the NFT's image.\n        image_url: vector<u8>,\n    }\n\n    // This entry function creates and returns an NFTAdmin object to grant minting authority.\n    // The admin parameter is not directly used; instead, we use the sender's address from the TxContext.\n    public entry fun create_admin(admin: &signer, ctx: &mut TxContext): NFTAdmin {\n        let admin_addr = ctx.sender();\n        NFTAdmin { id: UID::new(ctx), admin: admin_addr }\n    }\n\n    // This entry function mints a new NFT.\n    // Access control is enforced by allowing only the admin (stored in NFTAdmin) to mint new NFTs.\n    public entry fun mint_nft(admin_cap: &NFTAdmin, name: vector<u8>, description: vector<u8>, image_url: vector<u8>, ctx: &mut TxContext): NFT {\n        // Only the admin is allowed to mint NFTs.\n        assert!(ctx.sender() == admin_cap.admin, 1);\n        let new_id = UID::new(ctx);\n        NFT { id: new_id, name, description, image_url }\n    }\n\n    // This entry function transfers an NFT.\n    // In Sui, transferring an object only requires moving the object as the transaction output.\n    public entry fun transfer(nft: NFT, recipient: address, ctx: &mut TxContext): NFT {\n        // The Sui runtime ensures that only the current owner can move the NFT.\n        // This function simply returns the same NFT.\n        nft\n    }\n\n    // This entry function updates the metadata of an NFT.\n    // It creates a new NFT resource with the same UID and updated metadata.\n    public entry fun update_metadata(nft: NFT, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>, ctx: &mut TxContext): NFT {\n        let updated_nft = NFT { id: nft.id, name: new_name, description: new_description, image_url: new_image_url };\n        updated_nft\n    }\n}",
      "output": "UPDATING GIT DEPENDENCY https://github.com/MystenLabs/sui.git\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING TempContract\nwarning[W02021]: duplicate alias\n   \u250c\u2500 ./sources/temp_contract.move:14:26\n   \u2502\n14 \u2502     use sui::tx_context::TxContext;\n   \u2502                          ^^^^^^^^^ Unnecessary alias 'TxContext' for module member 'sui::tx_context::TxContext'. This alias is provided by default\n   \u2502\n   = This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nwarning[W02021]: duplicate alias\n   \u250c\u2500 ./sources/temp_contract.move:16:22\n   \u2502\n16 \u2502     use sui::object::UID;\n   \u2502                      ^^^ Unnecessary alias 'UID' for module member 'sui::object::UID'. This alias is provided by default\n   \u2502\n   = This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E01002]: unexpected token\n   \u250c\u2500 ./sources/temp_contract.move:19:5\n   \u2502\n19 \u2502     resource struct NFTAdmin has key, store, drop {\n   \u2502     ^^^^^^^^\n   \u2502     \u2502\n   \u2502     Unexpected 'resource'\n   \u2502     Expected a module member: 'spec', 'use', 'friend', 'const', 'fun', 'struct', or 'enum'\n\nerror[E01003]: invalid modifier\n   \u250c\u2500 ./sources/temp_contract.move:19:14\n   \u2502\n19 \u2502     resource struct NFTAdmin has key, store, drop {\n   \u2502              ^^^^^^ Invalid struct declaration. Internal struct declarations are not yet supported\n   \u2502\n   = Visibility annotations are required on struct declarations from the Move 2024 edition onwards.\n\nerror[E05001]: ability constraint not satisfied\n   \u250c\u2500 ./sources/temp_contract.move:21:13\n   \u2502\n21 \u2502         id: UID,\n   \u2502             ^^^\n   \u2502             \u2502\n   \u2502             Invalid field type. The struct was declared with the ability 'drop' so all fields require the ability 'drop'\n   \u2502             The type 'sui::object::UID' does not have the ability 'drop'\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- To satisfy the constraint, the 'drop' ability would need to be added here\n\nerror[E01002]: unexpected token\n   \u250c\u2500 ./sources/temp_contract.move:27:5\n   \u2502\n27 \u2502     resource struct NFT has key, store, drop {\n   \u2502     ^^^^^^^^\n   \u2502     \u2502\n   \u2502     Unexpected 'resource'\n   \u2502     Expected a module member: 'spec', 'use', 'friend', 'const', 'fun', 'struct', or 'enum'\n\nerror[E01003]: invalid modifier\n   \u250c\u2500 ./sources/temp_contract.move:27:14\n   \u2502\n27 \u2502     resource struct NFT has key, store, drop {\n   \u2502              ^^^^^^ Invalid struct declaration. Internal struct declarations are not yet supported\n   \u2502\n   = Visibility annotations are required on struct declarations from the Move 2024 edition onwards.\n\nerror[E05001]: ability constraint not satisfied\n   \u250c\u2500 ./sources/temp_contract.move:29:13\n   \u2502\n29 \u2502         id: UID,\n   \u2502             ^^^\n   \u2502             \u2502\n   \u2502             Invalid field type. The struct was declared with the ability 'drop' so all fields require the ability 'drop'\n   \u2502             The type 'sui::object::UID' does not have the ability 'drop'\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- To satisfy the constraint, the 'drop' ability would need to be added here\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:40:35\n   \u2502\n40 \u2502     public entry fun create_admin(admin: &signer, ctx: &mut TxContext): NFTAdmin {\n   \u2502                                   ^^^^^ Unused parameter 'admin'. Consider removing or prefixing with an underscore: '_admin'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:42:24\n   \u2502\n42 \u2502         NFTAdmin { id: UID::new(ctx), admin: admin_addr }\n   \u2502                        ^^^ Invalid construction. Expected an enum\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- But 'UID' is an struct\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:50:22\n   \u2502\n50 \u2502         let new_id = UID::new(ctx);\n   \u2502                      ^^^ Invalid construction. Expected an enum\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- But 'UID' is an struct\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:56:41\n   \u2502\n56 \u2502     public entry fun transfer(nft: NFT, recipient: address, ctx: &mut TxContext): NFT {\n   \u2502                                         ^^^^^^^^^ Unused parameter 'recipient'. Consider removing or prefixing with an underscore: '_recipient'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:56:61\n   \u2502\n56 \u2502     public entry fun transfer(nft: NFT, recipient: address, ctx: &mut TxContext): NFT {\n   \u2502                                                             ^^^ Unused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:64:126\n   \u2502\n64 \u2502     public entry fun update_metadata(nft: NFT, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>, ctx: &mut TxContext): NFT {\n   \u2502                                                                                                                              ^^^ Unused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E05001]: ability constraint not satisfied\n   \u250c\u2500 ./sources/temp_contract.move:65:37\n   \u2502\n29 \u2502         id: UID,\n   \u2502             --- The type 'sui::object::UID' does not have the ability 'copy'\n   \u00b7\n65 \u2502         let updated_nft = NFT { id: nft.id, name: new_name, description: new_description, image_url: new_image_url };\n   \u2502                                     ^^^^^^ Invalid implicit copy of field 'id' without the 'copy' ability\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- To satisfy the constraint, the 'copy' ability would need to be added here\n\n",
      "metadata": {
        "iteration": 2,
        "timestamp": 1740635810.650652,
        "error_stats": {
          "errors": 15,
          "compiler_warnings": 6,
          "linter_warnings": 0
        },
        "error_codes": {
          "W21002": {
            "count": 2,
            "message": "duplicate alias",
            "level": "Warning"
          },
          "N02001": {
            "count": 2,
            "message": "unexpected token",
            "level": "NonblockingError"
          },
          "N03001": {
            "count": 2,
            "message": "invalid modifier",
            "level": "NonblockingError"
          },
          "N01005": {
            "count": 3,
            "message": "ability constraint not satisfied",
            "level": "NonblockingError"
          },
          "W02009": {
            "count": 4,
            "message": "unused variable",
            "level": "Warning"
          },
          "E06003": {
            "count": 2,
            "message": "unexpected name in this position",
            "level": "BlockingError"
          }
        }
      }
    },
    {
      "input": "module 0x0::my_module {\n    // Import UID from the Sui framework.\n    use sui::object::UID;\n    // Import the entire tx_context module to avoid duplicate alias warnings.\n    use sui::tx_context;\n    // Import signer functionality from the standard library.\n    use std::signer;\n\n    // NFTAdmin is a capability resource which grants permission to mint NFTs.\n    // Abilities: key and store.\n    public resource struct NFTAdmin has key, store {\n        // Each NFTAdmin has a unique id.\n        id: UID,\n        // The admin field stores the authorized admin's address.\n        admin: address,\n    }\n\n    // NFT represents a non-fungible token with metadata and an owner.\n    // Abilities: key and store.\n    public resource struct NFT has key, store {\n        // Unique identifier for the NFT.\n        id: UID,\n        // The current owner's address.\n        owner: address,\n        // Metadata fields.\n        name: vector<u8>,\n        description: vector<u8>,\n        image_url: vector<u8>,\n    }\n\n    // create_admin creates and returns an NFTAdmin resource.\n    // This function should be called by the intended admin.\n    public entry fun create_admin(admin: &signer, ctx: &mut tx_context::TxContext): NFTAdmin {\n        let admin_addr = signer::address_of(admin);\n        NFTAdmin {\n            id: UID::new(ctx),\n            admin: admin_addr,\n        }\n    }\n\n    // mint allows the admin (as indicated by the NFTAdmin capability) to create a new NFT.\n    // Only the admin is allowed to mint NFTs.\n    public entry fun mint(nft_admin: &NFTAdmin, minter: &signer, name: vector<u8>, description: vector<u8>, image_url: vector<u8>, ctx: &mut tx_context::TxContext): NFT {\n        let minter_addr = signer::address_of(minter);\n        // Verify that the minter is authorized as admin.\n        assert!(minter_addr == nft_admin.admin, 1);\n        NFT {\n            id: UID::new(ctx),\n            owner: minter_addr, // The minted NFT is initially owned by the admin.\n            name: name,\n            description: description,\n            image_url: image_url,\n        }\n    }\n\n    // transfer allows the current owner of the NFT to transfer ownership to another address.\n    // The function takes the NFT (to be moved), a reference to the sender's signer, the new owner's address,\n    // and the transaction context.\n    public entry fun transfer(nft: NFT, sender: &signer, new_owner: address, ctx: &mut tx_context::TxContext): NFT {\n        let sender_addr = signer::address_of(sender);\n        // Ensure that the sender is indeed the owner of the NFT.\n        assert!(sender_addr == nft.owner, 2);\n        NFT {\n            id: nft.id, // Moving the UID without copying.\n            owner: new_owner,\n            name: nft.name,\n            description: nft.description,\n            image_url: nft.image_url,\n        }\n    }\n\n    // update_metadata allows the owner of an NFT to change its metadata.\n    // It consumes the old NFT resource and returns a new one with updated fields.\n    public entry fun update_metadata(nft: NFT, updater: &signer, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>, ctx: &mut tx_context::TxContext): NFT {\n        let updater_addr = signer::address_of(updater);\n        // Ensure that only the NFT owner can update its metadata.\n        assert!(updater_addr == nft.owner, 3);\n        // Destructure the NFT to move the non-metadata fields.\n        let NFT { id, owner, name: _, description: _, image_url: _ } = nft;\n        NFT {\n            id: id,\n            owner: owner,\n            name: new_name,\n            description: new_description,\n            image_url: new_image_url,\n        }\n    }\n}",
      "output": "UPDATING GIT DEPENDENCY https://github.com/MystenLabs/sui.git\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING TempContract\nwarning[W02021]: duplicate alias\n  \u250c\u2500 ./sources/temp_contract.move:3:22\n  \u2502\n3 \u2502     use sui::object::UID;\n  \u2502                      ^^^ Unnecessary alias 'UID' for module member 'sui::object::UID'. This alias is provided by default\n  \u2502\n  = This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nwarning[W02021]: duplicate alias\n  \u250c\u2500 ./sources/temp_contract.move:5:14\n  \u2502\n5 \u2502     use sui::tx_context;\n  \u2502              ^^^^^^^^^^ Unnecessary alias 'tx_context' for module 'sui::tx_context'. This alias is provided by default\n  \u2502\n  = This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E03002]: unbound module\n  \u250c\u2500 ./sources/temp_contract.move:7:9\n  \u2502\n7 \u2502     use std::signer;\n  \u2502         ^^^^^^^^^^^ Invalid 'use'. Unbound module: 'std::signer'\n\nerror[E01002]: unexpected token\n   \u250c\u2500 ./sources/temp_contract.move:11:12\n   \u2502\n11 \u2502     public resource struct NFTAdmin has key, store {\n   \u2502            ^^^^^^^^\n   \u2502            \u2502\n   \u2502            Unexpected 'resource'\n   \u2502            Expected a module member: 'spec', 'use', 'friend', 'const', 'fun', 'struct', or 'enum'\n\nerror[E01003]: invalid modifier\n   \u250c\u2500 ./sources/temp_contract.move:11:21\n   \u2502\n11 \u2502     public resource struct NFTAdmin has key, store {\n   \u2502                     ^^^^^^ Invalid struct declaration. Internal struct declarations are not yet supported\n   \u2502\n   = Visibility annotations are required on struct declarations from the Move 2024 edition onwards.\n\nerror[E01002]: unexpected token\n   \u250c\u2500 ./sources/temp_contract.move:20:12\n   \u2502\n20 \u2502     public resource struct NFT has key, store {\n   \u2502            ^^^^^^^^\n   \u2502            \u2502\n   \u2502            Unexpected 'resource'\n   \u2502            Expected a module member: 'spec', 'use', 'friend', 'const', 'fun', 'struct', or 'enum'\n\nerror[E01003]: invalid modifier\n   \u250c\u2500 ./sources/temp_contract.move:20:21\n   \u2502\n20 \u2502     public resource struct NFT has key, store {\n   \u2502                     ^^^^^^ Invalid struct declaration. Internal struct declarations are not yet supported\n   \u2502\n   = Visibility annotations are required on struct declarations from the Move 2024 edition onwards.\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:33:12\n   \u2502\n11 \u2502     public resource struct NFTAdmin has key, store {\n   \u2502                            -------- To satisfy the constraint, the 'drop' ability would need to be added here\n   \u00b7\n33 \u2502     public entry fun create_admin(admin: &signer, ctx: &mut tx_context::TxContext): NFTAdmin {\n   \u2502            ^^^^^                                                                    -------- The type '0x0::my_module::NFTAdmin' does not have the ability 'drop'\n   \u2502            \u2502                                                                         \n   \u2502            Invalid return type for entry function 'create_admin'\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:33:35\n   \u2502\n33 \u2502     public entry fun create_admin(admin: &signer, ctx: &mut tx_context::TxContext): NFTAdmin {\n   \u2502                                   ^^^^^ Unused parameter 'admin'. Consider removing or prefixing with an underscore: '_admin'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:34:26\n   \u2502\n34 \u2502         let admin_addr = signer::address_of(admin);\n   \u2502                          ^^^^^^ Could not resolve the name 'signer'\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:36:17\n   \u2502\n36 \u2502             id: UID::new(ctx),\n   \u2502                 ^^^ Invalid construction. Expected an enum\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- But 'UID' is an struct\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:43:12\n   \u2502\n20 \u2502     public resource struct NFT has key, store {\n   \u2502                            --- To satisfy the constraint, the 'drop' ability would need to be added here\n   \u00b7\n43 \u2502     public entry fun mint(nft_admin: &NFTAdmin, minter: &signer, name: vector<u8>, description: vector<u8>, image_url: vector<u8>, ctx: &mut tx_context::TxContext): NFT {\n   \u2502            ^^^^^                                                                                                                                                     --- The type '0x0::my_module::NFT' does not have the ability 'drop'\n   \u2502            \u2502                                                                                                                                                          \n   \u2502            Invalid return type for entry function 'mint'\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:43:49\n   \u2502\n43 \u2502     public entry fun mint(nft_admin: &NFTAdmin, minter: &signer, name: vector<u8>, description: vector<u8>, image_url: vector<u8>, ctx: &mut tx_context::TxContext): NFT {\n   \u2502                                                 ^^^^^^ Unused parameter 'minter'. Consider removing or prefixing with an underscore: '_minter'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:44:27\n   \u2502\n44 \u2502         let minter_addr = signer::address_of(minter);\n   \u2502                           ^^^^^^ Could not resolve the name 'signer'\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:48:17\n   \u2502\n48 \u2502             id: UID::new(ctx),\n   \u2502                 ^^^ Invalid construction. Expected an enum\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- But 'UID' is an struct\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:59:12\n   \u2502\n20 \u2502     public resource struct NFT has key, store {\n   \u2502                            --- To satisfy the constraint, the 'drop' ability would need to be added here\n   \u00b7\n59 \u2502     public entry fun transfer(nft: NFT, sender: &signer, new_owner: address, ctx: &mut tx_context::TxContext): NFT {\n   \u2502            ^^^^^                                                                                               --- The type '0x0::my_module::NFT' does not have the ability 'drop'\n   \u2502            \u2502                                                                                                    \n   \u2502            Invalid return type for entry function 'transfer'\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:59:41\n   \u2502\n59 \u2502     public entry fun transfer(nft: NFT, sender: &signer, new_owner: address, ctx: &mut tx_context::TxContext): NFT {\n   \u2502                                         ^^^^^^ Unused parameter 'sender'. Consider removing or prefixing with an underscore: '_sender'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:59:78\n   \u2502\n59 \u2502     public entry fun transfer(nft: NFT, sender: &signer, new_owner: address, ctx: &mut tx_context::TxContext): NFT {\n   \u2502                                                                              ^^^ Unused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:60:27\n   \u2502\n60 \u2502         let sender_addr = signer::address_of(sender);\n   \u2502                           ^^^^^^ Could not resolve the name 'signer'\n\nerror[E05001]: ability constraint not satisfied\n   \u250c\u2500 ./sources/temp_contract.move:64:17\n   \u2502\n22 \u2502         id: UID,\n   \u2502             --- The type 'sui::object::UID' does not have the ability 'copy'\n   \u00b7\n64 \u2502             id: nft.id, // Moving the UID without copying.\n   \u2502                 ^^^^^^ Invalid implicit copy of field 'id' without the 'copy' ability\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- To satisfy the constraint, the 'copy' ability would need to be added here\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:74:12\n   \u2502\n20 \u2502     public resource struct NFT has key, store {\n   \u2502                            --- To satisfy the constraint, the 'drop' ability would need to be added here\n   \u00b7\n74 \u2502     public entry fun update_metadata(nft: NFT, updater: &signer, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>, ctx: &mut tx_context::TxContext): NFT {\n   \u2502            ^^^^^                                                                                                                                                                 --- The type '0x0::my_module::NFT' does not have the ability 'drop'\n   \u2502            \u2502                                                                                                                                                                      \n   \u2502            Invalid return type for entry function 'update_metadata'\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:74:48\n   \u2502\n74 \u2502     public entry fun update_metadata(nft: NFT, updater: &signer, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>, ctx: &mut tx_context::TxContext): NFT {\n   \u2502                                                ^^^^^^^ Unused parameter 'updater'. Consider removing or prefixing with an underscore: '_updater'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:74:144\n   \u2502\n74 \u2502     public entry fun update_metadata(nft: NFT, updater: &signer, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>, ctx: &mut tx_context::TxContext): NFT {\n   \u2502                                                                                                                                                ^^^ Unused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:75:28\n   \u2502\n75 \u2502         let updater_addr = signer::address_of(updater);\n   \u2502                            ^^^^^^ Could not resolve the name 'signer'\n\n",
      "metadata": {
        "iteration": 3,
        "timestamp": 1740635859.528998,
        "error_stats": {
          "errors": 24,
          "compiler_warnings": 8,
          "linter_warnings": 0
        },
        "error_codes": {
          "W21002": {
            "count": 2,
            "message": "duplicate alias",
            "level": "Warning"
          },
          "E02003": {
            "count": 1,
            "message": "unbound module",
            "level": "BlockingError"
          },
          "N02001": {
            "count": 2,
            "message": "unexpected token",
            "level": "NonblockingError"
          },
          "N03001": {
            "count": 2,
            "message": "invalid modifier",
            "level": "NonblockingError"
          },
          "N02002": {
            "count": 4,
            "message": "invalid 'entry' function signature",
            "level": "NonblockingError"
          },
          "W02009": {
            "count": 6,
            "message": "unused variable",
            "level": "Warning"
          },
          "E06003": {
            "count": 6,
            "message": "unexpected name in this position",
            "level": "BlockingError"
          },
          "N01005": {
            "count": 1,
            "message": "ability constraint not satisfied",
            "level": "NonblockingError"
          }
        }
      }
    },
    {
      "input": "// Module for NFT Collection on Sui\nmodule temp_addr::my_module {\n    // Import the Unique Identifier (UID) type and tx_context utilities from Sui.\n    use sui::object::UID;\n    use sui::tx_context;\n\n    // NFTAdmin resource for NFT minting access control.\n    // Added the 'drop' ability so it can be returned from entry functions.\n    resource struct NFTAdmin has key, store, drop {\n        // The owner's address who is allowed to mint new NFTs.\n        owner: address,\n    }\n\n    // Custom NFT resource containing metadata.\n    // The 'drop' ability is added so that the NFT can be returned from entry functions.\n    resource struct NFT has key, store, drop {\n        // Unique identifier for the NFT generated using the tx context.\n        id: UID,\n        // Metadata fields for the NFT.\n        name: vector<u8>,\n        description: vector<u8>,\n        image_url: vector<u8>,\n        // Current owner of the NFT.\n        owner: address,\n    }\n\n    // Entry function to create an NFTAdmin.\n    // The sender\u2019s address, retrieved via the tx context, becomes the NFT admin.\n    public entry fun create_admin(ctx: &mut tx_context::TxContext): NFTAdmin {\n        let admin_addr = tx_context::sender(ctx);\n        NFTAdmin { owner: admin_addr }\n    }\n\n    // Entry function to mint a new NFT.\n    // Only the admin (whose address is stored in NFTAdmin) can mint.\n    public entry fun mint(admin: &NFTAdmin, ctx: &mut tx_context::TxContext, name: vector<u8>, description: vector<u8>, image_url: vector<u8>): NFT {\n        let sender_addr = tx_context::sender(ctx);\n        // Enforce that only the NFT admin can mint new NFTs.\n        assert!(sender_addr == admin.owner, 1);\n\n        // Generate a new unique identifier for the NFT.\n        let new_id = UID::new(ctx);\n        NFT {\n            id: new_id,\n            name,\n            description,\n            image_url,\n            owner: sender_addr,\n        }\n    }\n\n    // Entry function to transfer an NFT from its current owner to a new owner.\n    public entry fun transfer(nft: NFT, ctx: &mut tx_context::TxContext, new_owner: address): NFT {\n        // Destructure the NFT to move its fields.\n        let NFT { id, name, description, image_url, owner } = nft;\n        let sender_addr = tx_context::sender(ctx);\n        // Only the current owner is permitted to transfer the NFT.\n        assert!(sender_addr == owner, 2);\n\n        // Return a new NFT with the updated owner.\n        NFT {\n            id,\n            name,\n            description,\n            image_url,\n            owner: new_owner,\n        }\n    }\n\n    // Entry function to update the metadata of an NFT.\n    // Only the owner of the NFT is allowed to modify its metadata.\n    public entry fun update_metadata(nft: NFT, ctx: &mut tx_context::TxContext, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>): NFT {\n        let NFT { id, name: _, description: _, image_url: _, owner } = nft;\n        let sender_addr = tx_context::sender(ctx);\n        // Enforce that only the NFT owner can update its metadata.\n        assert!(sender_addr == owner, 3);\n\n        // Return a new NFT instance with updated metadata.\n        NFT {\n            id,\n            name: new_name,\n            description: new_description,\n            image_url: new_image_url,\n            owner,\n        }\n    }\n}",
      "output": "UPDATING GIT DEPENDENCY https://github.com/MystenLabs/sui.git\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING TempContract\nwarning[W02021]: duplicate alias\n  \u250c\u2500 ./sources/temp_contract.move:4:22\n  \u2502\n4 \u2502     use sui::object::UID;\n  \u2502                      ^^^ Unnecessary alias 'UID' for module member 'sui::object::UID'. This alias is provided by default\n  \u2502\n  = This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nwarning[W02021]: duplicate alias\n  \u250c\u2500 ./sources/temp_contract.move:5:14\n  \u2502\n5 \u2502     use sui::tx_context;\n  \u2502              ^^^^^^^^^^ Unnecessary alias 'tx_context' for module 'sui::tx_context'. This alias is provided by default\n  \u2502\n  = This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E01002]: unexpected token\n  \u250c\u2500 ./sources/temp_contract.move:9:5\n  \u2502\n9 \u2502     resource struct NFTAdmin has key, store, drop {\n  \u2502     ^^^^^^^^\n  \u2502     \u2502\n  \u2502     Unexpected 'resource'\n  \u2502     Expected a module member: 'spec', 'use', 'friend', 'const', 'fun', 'struct', or 'enum'\n\nerror[E01003]: invalid modifier\n  \u250c\u2500 ./sources/temp_contract.move:9:14\n  \u2502\n9 \u2502     resource struct NFTAdmin has key, store, drop {\n  \u2502              ^^^^^^ Invalid struct declaration. Internal struct declarations are not yet supported\n  \u2502\n  = Visibility annotations are required on struct declarations from the Move 2024 edition onwards.\n\nerror[Sui E02007]: invalid object declaration\n   \u250c\u2500 ./sources/temp_contract.move:11:9\n   \u2502\n 9 \u2502     resource struct NFTAdmin has key, store, drop {\n   \u2502                                  --- The 'key' ability is used to declare objects in Sui\n10 \u2502         // The owner's address who is allowed to mint new NFTs.\n11 \u2502         owner: address,\n   \u2502         ^^^^^ Invalid object 'NFTAdmin'. Structs with the 'key' ability must have 'id: sui::object::UID' as their first field\n\nerror[E01002]: unexpected token\n   \u250c\u2500 ./sources/temp_contract.move:16:5\n   \u2502\n16 \u2502     resource struct NFT has key, store, drop {\n   \u2502     ^^^^^^^^\n   \u2502     \u2502\n   \u2502     Unexpected 'resource'\n   \u2502     Expected a module member: 'spec', 'use', 'friend', 'const', 'fun', 'struct', or 'enum'\n\nerror[E01003]: invalid modifier\n   \u250c\u2500 ./sources/temp_contract.move:16:14\n   \u2502\n16 \u2502     resource struct NFT has key, store, drop {\n   \u2502              ^^^^^^ Invalid struct declaration. Internal struct declarations are not yet supported\n   \u2502\n   = Visibility annotations are required on struct declarations from the Move 2024 edition onwards.\n\nerror[E05001]: ability constraint not satisfied\n   \u250c\u2500 ./sources/temp_contract.move:18:13\n   \u2502\n18 \u2502         id: UID,\n   \u2502             ^^^\n   \u2502             \u2502\n   \u2502             Invalid field type. The struct was declared with the ability 'drop' so all fields require the ability 'drop'\n   \u2502             The type 'sui::object::UID' does not have the ability 'drop'\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- To satisfy the constraint, the 'drop' ability would need to be added here\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:36:45\n   \u2502\n36 \u2502     public entry fun mint(admin: &NFTAdmin, ctx: &mut tx_context::TxContext, name: vector<u8>, description: vector<u8>, image_url: vector<u8>): NFT {\n   \u2502            -----                            ^^^  -------------------------- 'entry' parameters must be primitives (by-value), vectors of primitives, objects (by-reference or by-value), vectors of objects, or 'Receiving' arguments (by-reference or by-value)\n   \u2502            \u2502                                \u2502     \n   \u2502            \u2502                                Invalid 'entry' parameter type for parameter 'ctx'\n   \u2502            'mint' was declared 'entry' here\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:42:22\n   \u2502\n42 \u2502         let new_id = UID::new(ctx);\n   \u2502                      ^^^ Invalid construction. Expected an enum\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- But 'UID' is an struct\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:53:41\n   \u2502\n53 \u2502     public entry fun transfer(nft: NFT, ctx: &mut tx_context::TxContext, new_owner: address): NFT {\n   \u2502            -----                        ^^^  -------------------------- 'entry' parameters must be primitives (by-value), vectors of primitives, objects (by-reference or by-value), vectors of objects, or 'Receiving' arguments (by-reference or by-value)\n   \u2502            \u2502                            \u2502     \n   \u2502            \u2502                            Invalid 'entry' parameter type for parameter 'ctx'\n   \u2502            'transfer' was declared 'entry' here\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:72:48\n   \u2502\n72 \u2502     public entry fun update_metadata(nft: NFT, ctx: &mut tx_context::TxContext, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>): NFT {\n   \u2502            -----                               ^^^  -------------------------- 'entry' parameters must be primitives (by-value), vectors of primitives, objects (by-reference or by-value), vectors of objects, or 'Receiving' arguments (by-reference or by-value)\n   \u2502            \u2502                                   \u2502     \n   \u2502            \u2502                                   Invalid 'entry' parameter type for parameter 'ctx'\n   \u2502            'update_metadata' was declared 'entry' here\n\n",
      "metadata": {
        "iteration": 4,
        "timestamp": 1740635925.4470952,
        "error_stats": {
          "errors": 12,
          "compiler_warnings": 2,
          "linter_warnings": 0
        },
        "error_codes": {
          "W21002": {
            "count": 2,
            "message": "duplicate alias",
            "level": "Warning"
          },
          "N02001": {
            "count": 2,
            "message": "unexpected token",
            "level": "NonblockingError"
          },
          "N03001": {
            "count": 2,
            "message": "invalid modifier",
            "level": "NonblockingError"
          },
          "N07002": {
            "count": 1,
            "message": "invalid object declaration",
            "level": "NonblockingError"
          },
          "N01005": {
            "count": 1,
            "message": "ability constraint not satisfied",
            "level": "NonblockingError"
          },
          "N02002": {
            "count": 3,
            "message": "invalid 'entry' function signature",
            "level": "NonblockingError"
          },
          "E06003": {
            "count": 1,
            "message": "unexpected name in this position",
            "level": "BlockingError"
          }
        }
      }
    },
    {
      "input": "module temp_addr::my_module {\n\n    // Allow duplicate alias warnings (if any) from the Sui framework.\n    #[allow(duplicate_alias)]\n\n    // Import the UID type and the transaction context functions from the Sui framework.\n    use sui::object::UID;\n    use sui::tx_context::TxContext;\n    use sui::tx_context;\n\n    // NOTE:\n    // In Sui Move, objects must have a field \"id: UID\" as the first field when using the 'key' ability.\n    // We remove the 'drop' ability from our structs since UID does not have it.\n    \n    // NFTAdmin is an object that controls access for minting new NFTs.\n    // Only the address stored in the admin can authorize minting.\n    public struct NFTAdmin has key, store {\n        id: UID,         // The required unique identifier for Sui objects.\n        owner: address,  // The address authorized to mint NFTs.\n    }\n\n    // NFT is our custom non-fungible token type with metadata.\n    public struct NFT has key, store {\n        id: UID,             // Unique identifier for the NFT.\n        name: vector<u8>,    // Name of the NFT.\n        description: vector<u8>, // Description of the NFT.\n        image_url: vector<u8>,   // URL of the NFT image.\n        owner: address,      // Current owner of the NFT.\n    }\n\n    // Create an NFTAdmin object.\n    // This entry function initializes the admin and must be called by the intended admin owner.\n    public entry fun create_admin(owner: address, mut ctx: TxContext): NFTAdmin {\n        // Generate a new UID for the NFTAdmin object.\n        let new_id = UID::new(&mut ctx);\n        NFTAdmin { id: new_id, owner }\n    }\n\n    // Mint a new NFT.\n    // Only the address stored in the NFTAdmin object is authorized to mint.\n    public entry fun mint(admin: &NFTAdmin, mut ctx: TxContext, name: vector<u8>, description: vector<u8>, image_url: vector<u8>): NFT {\n        // Check that the transaction sender is the admin owner.\n        let sender = tx_context::sender(&ctx);\n        assert!(admin.owner == sender, 1);\n        // Generate a new UID for the NFT.\n        let new_id = UID::new(&mut ctx);\n        // Create and return the new NFT.\n        NFT { id: new_id, name, description, image_url, owner: admin.owner }\n    }\n\n    // Transfer NFT ownership.\n    // Only the current owner of the NFT can initiate a transfer.\n    public entry fun transfer(nft: NFT, mut ctx: TxContext, new_owner: address): NFT {\n        let sender = tx_context::sender(&ctx);\n        // Enforce that only the NFT owner can transfer it.\n        assert!(nft.owner == sender, 2);\n        // Construct a new NFT with the updated owner.\n        NFT { \n            id: nft.id,\n            name: nft.name,\n            description: nft.description,\n            image_url: nft.image_url,\n            owner: new_owner\n        }\n    }\n\n    // Update the metadata of an NFT.\n    // Only the NFT's owner is allowed to update its metadata.\n    public entry fun update_metadata(nft: NFT, mut ctx: TxContext, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>): NFT {\n        let sender = tx_context::sender(&ctx);\n        // Enforce that only the NFT owner can update the metadata.\n        assert!(nft.owner == sender, 3);\n        // Reconstruct the NFT with updated metadata while preserving its id and owner.\n        NFT {\n            id: nft.id,\n            name: new_name,\n            description: new_description,\n            image_url: new_image_url,\n            owner: nft.owner\n        }\n    }\n}",
      "output": "UPDATING GIT DEPENDENCY https://github.com/MystenLabs/sui.git\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING TempContract\nerror[E02015]: invalid attribute\n  \u250c\u2500 ./sources/temp_contract.move:4:7\n  \u2502\n4 \u2502     #[allow(duplicate_alias)]\n  \u2502       ^^^^^\n  \u2502       \u2502\n  \u2502       Known attribute 'allow' is not expected with a use\n  \u2502       Expected to be used with one of the following: module, constant, struct, enum, function\n\nwarning[W02021]: duplicate alias\n  \u250c\u2500 ./sources/temp_contract.move:7:22\n  \u2502\n7 \u2502     use sui::object::UID;\n  \u2502                      ^^^ Unnecessary alias 'UID' for module member 'sui::object::UID'. This alias is provided by default\n  \u2502\n  = This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nwarning[W02021]: duplicate alias\n  \u250c\u2500 ./sources/temp_contract.move:8:26\n  \u2502\n8 \u2502     use sui::tx_context::TxContext;\n  \u2502                          ^^^^^^^^^ Unnecessary alias 'TxContext' for module member 'sui::tx_context::TxContext'. This alias is provided by default\n  \u2502\n  = This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nwarning[W02021]: duplicate alias\n  \u250c\u2500 ./sources/temp_contract.move:9:14\n  \u2502\n9 \u2502     use sui::tx_context;\n  \u2502              ^^^^^^^^^^ Unnecessary alias 'tx_context' for module 'sui::tx_context'. This alias is provided by default\n  \u2502\n  = This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:33:12\n   \u2502\n17 \u2502     public struct NFTAdmin has key, store {\n   \u2502                   -------- To satisfy the constraint, the 'drop' ability would need to be added here\n   \u00b7\n33 \u2502     public entry fun create_admin(owner: address, mut ctx: TxContext): NFTAdmin {\n   \u2502            ^^^^^                                                       -------- The type 'temp_addr::my_module::NFTAdmin' does not have the ability 'drop'\n   \u2502            \u2502                                                            \n   \u2502            Invalid return type for entry function 'create_admin'\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:33:55\n   \u2502\n33 \u2502     public entry fun create_admin(owner: address, mut ctx: TxContext): NFTAdmin {\n   \u2502            -----                                      ^^^  --------- 'entry' parameters must be primitives (by-value), vectors of primitives, objects (by-reference or by-value), vectors of objects, or 'Receiving' arguments (by-reference or by-value)\n   \u2502            \u2502                                          \u2502     \n   \u2502            \u2502                                          Invalid 'entry' parameter type for parameter 'ctx'\n   \u2502            'create_admin' was declared 'entry' here\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:35:22\n   \u2502\n35 \u2502         let new_id = UID::new(&mut ctx);\n   \u2502                      ^^^ Invalid construction. Expected an enum\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- But 'UID' is an struct\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:41:12\n   \u2502\n23 \u2502     public struct NFT has key, store {\n   \u2502                   --- To satisfy the constraint, the 'drop' ability would need to be added here\n   \u00b7\n41 \u2502     public entry fun mint(admin: &NFTAdmin, mut ctx: TxContext, name: vector<u8>, description: vector<u8>, image_url: vector<u8>): NFT {\n   \u2502            ^^^^^                                                                                                                   --- The type 'temp_addr::my_module::NFT' does not have the ability 'drop'\n   \u2502            \u2502                                                                                                                        \n   \u2502            Invalid return type for entry function 'mint'\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:41:49\n   \u2502\n41 \u2502     public entry fun mint(admin: &NFTAdmin, mut ctx: TxContext, name: vector<u8>, description: vector<u8>, image_url: vector<u8>): NFT {\n   \u2502            -----                                ^^^  --------- 'entry' parameters must be primitives (by-value), vectors of primitives, objects (by-reference or by-value), vectors of objects, or 'Receiving' arguments (by-reference or by-value)\n   \u2502            \u2502                                    \u2502     \n   \u2502            \u2502                                    Invalid 'entry' parameter type for parameter 'ctx'\n   \u2502            'mint' was declared 'entry' here\n\nerror[E03006]: unexpected name in this position\n   \u250c\u2500 ./sources/temp_contract.move:46:22\n   \u2502\n46 \u2502         let new_id = UID::new(&mut ctx);\n   \u2502                      ^^^ Invalid construction. Expected an enum\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- But 'UID' is an struct\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:53:12\n   \u2502\n23 \u2502     public struct NFT has key, store {\n   \u2502                   --- To satisfy the constraint, the 'drop' ability would need to be added here\n   \u00b7\n53 \u2502     public entry fun transfer(nft: NFT, mut ctx: TxContext, new_owner: address): NFT {\n   \u2502            ^^^^^                                                                 --- The type 'temp_addr::my_module::NFT' does not have the ability 'drop'\n   \u2502            \u2502                                                                      \n   \u2502            Invalid return type for entry function 'transfer'\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:53:45\n   \u2502\n53 \u2502     public entry fun transfer(nft: NFT, mut ctx: TxContext, new_owner: address): NFT {\n   \u2502            -----                            ^^^  --------- 'entry' parameters must be primitives (by-value), vectors of primitives, objects (by-reference or by-value), vectors of objects, or 'Receiving' arguments (by-reference or by-value)\n   \u2502            \u2502                                \u2502     \n   \u2502            \u2502                                Invalid 'entry' parameter type for parameter 'ctx'\n   \u2502            'transfer' was declared 'entry' here\n\nerror[E05001]: ability constraint not satisfied\n   \u250c\u2500 ./sources/temp_contract.move:59:17\n   \u2502\n24 \u2502         id: UID,             // Unique identifier for the NFT.\n   \u2502             --- The type 'sui::object::UID' does not have the ability 'copy'\n   \u00b7\n59 \u2502             id: nft.id,\n   \u2502                 ^^^^^^ Invalid implicit copy of field 'id' without the 'copy' ability\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- To satisfy the constraint, the 'copy' ability would need to be added here\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:69:12\n   \u2502\n23 \u2502     public struct NFT has key, store {\n   \u2502                   --- To satisfy the constraint, the 'drop' ability would need to be added here\n   \u00b7\n69 \u2502     public entry fun update_metadata(nft: NFT, mut ctx: TxContext, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>): NFT {\n   \u2502            ^^^^^                                                                                                                                  --- The type 'temp_addr::my_module::NFT' does not have the ability 'drop'\n   \u2502            \u2502                                                                                                                                       \n   \u2502            Invalid return type for entry function 'update_metadata'\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:69:52\n   \u2502\n69 \u2502     public entry fun update_metadata(nft: NFT, mut ctx: TxContext, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>): NFT {\n   \u2502            -----                                   ^^^  --------- 'entry' parameters must be primitives (by-value), vectors of primitives, objects (by-reference or by-value), vectors of objects, or 'Receiving' arguments (by-reference or by-value)\n   \u2502            \u2502                                       \u2502     \n   \u2502            \u2502                                       Invalid 'entry' parameter type for parameter 'ctx'\n   \u2502            'update_metadata' was declared 'entry' here\n\nerror[E05001]: ability constraint not satisfied\n   \u250c\u2500 ./sources/temp_contract.move:75:17\n   \u2502\n24 \u2502         id: UID,             // Unique identifier for the NFT.\n   \u2502             --- The type 'sui::object::UID' does not have the ability 'copy'\n   \u00b7\n75 \u2502             id: nft.id,\n   \u2502                 ^^^^^^ Invalid implicit copy of field 'id' without the 'copy' ability\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- To satisfy the constraint, the 'copy' ability would need to be added here\n\n",
      "metadata": {
        "iteration": 5,
        "timestamp": 1740635982.611949,
        "error_stats": {
          "errors": 16,
          "compiler_warnings": 3,
          "linter_warnings": 0
        },
        "error_codes": {
          "N15002": {
            "count": 1,
            "message": "invalid attribute",
            "level": "NonblockingError"
          },
          "W21002": {
            "count": 3,
            "message": "duplicate alias",
            "level": "Warning"
          },
          "N02002": {
            "count": 8,
            "message": "invalid 'entry' function signature",
            "level": "NonblockingError"
          },
          "E06003": {
            "count": 2,
            "message": "unexpected name in this position",
            "level": "BlockingError"
          },
          "N01005": {
            "count": 2,
            "message": "ability constraint not satisfied",
            "level": "NonblockingError"
          }
        }
      }
    },
    {
      "input": "module temp_addr::my_module {\n\n    // Import necessary Sui modules.\n    use sui::object::{UID, new};\n    use sui::tx_context::TxContext;\n\n    // NFTAdmin struct acts as an admin for minting NFTs.\n    // It includes a unique identifier and the admin owner's address.\n    // The 'drop' ability is added so that objects of this type can be returned\n    // from entry functions.\n    public struct NFTAdmin has key, store, drop {\n        id: UID,\n        owner: address,\n    }\n\n    // NFT struct representing a non-fungible token with metadata.\n    // It includes a unique identifier, the owner address, and metadata fields.\n    public struct NFT has key, store, drop {\n        id: UID,             // Unique identifier for the NFT.\n        owner: address,      // Current owner of the NFT.\n        name: vector<u8>,    // Name metadata.\n        description: vector<u8>,  // Description metadata.\n        image_url: vector<u8>, // URL to the NFT image.\n    }\n\n    // The create_admin function creates an NFTAdmin object.\n    // Only the account with the provided owner address will have admin powers.\n    public entry fun create_admin(owner: address, ctx: &mut TxContext): NFTAdmin {\n        // Generate a new unique identifier using the Sui framework's helper.\n        let new_id = new(ctx);\n        NFTAdmin { id: new_id, owner }\n    }\n\n    // The mint function allows an admin to mint a new NFT.\n    // It takes the admin reference, transaction context, and metadata parameters.\n    public entry fun mint(admin: &NFTAdmin, ctx: &mut TxContext, name: vector<u8>, description: vector<u8>, image_url: vector<u8>): NFT {\n        // In a real-world scenario, you would enforce that the caller is the admin.owner.\n        let new_id = new(ctx);\n        NFT {\n            id: new_id,\n            owner: admin.owner,\n            name,\n            description,\n            image_url,\n        }\n    }\n\n    // The transfer function transfers ownership of an NFT to a new address.\n    public entry fun transfer(nft: NFT, ctx: &mut TxContext, new_owner: address): NFT {\n        // Destructure the NFT resource to move its fields (avoiding implicit copy of UID).\n        let NFT { id, owner: old_owner, name, description, image_url } = nft;\n        NFT {\n            id, // The UID is moved.\n            owner: new_owner,\n            name,\n            description,\n            image_url,\n        }\n    }\n\n    // The update_metadata function allows the NFT owner to change metadata.\n    public entry fun update_metadata(nft: NFT, ctx: &mut TxContext, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>): NFT {\n        // Destructure the NFT to move its fields.\n        let NFT { id, owner, name: old_name, description: old_description, image_url: old_image_url } = nft;\n        // In a production contract, you would check that the caller is the NFT owner.\n        NFT {\n            id,\n            owner,\n            name: new_name,\n            description: new_description,\n            image_url: new_image_url,\n        }\n    }\n}",
      "output": "UPDATING GIT DEPENDENCY https://github.com/MystenLabs/sui.git\nINCLUDING DEPENDENCY Sui\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING TempContract\nwarning[W02021]: duplicate alias\n  \u250c\u2500 ./sources/temp_contract.move:4:23\n  \u2502\n4 \u2502     use sui::object::{UID, new};\n  \u2502                       ^^^ Unnecessary alias 'UID' for module member 'sui::object::UID'. This alias is provided by default\n  \u2502\n  = This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nwarning[W02021]: duplicate alias\n  \u250c\u2500 ./sources/temp_contract.move:5:26\n  \u2502\n5 \u2502     use sui::tx_context::TxContext;\n  \u2502                          ^^^^^^^^^ Unnecessary alias 'TxContext' for module member 'sui::tx_context::TxContext'. This alias is provided by default\n  \u2502\n  = This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[E05001]: ability constraint not satisfied\n   \u250c\u2500 ./sources/temp_contract.move:12:13\n   \u2502\n12 \u2502         id: UID,\n   \u2502             ^^^\n   \u2502             \u2502\n   \u2502             Invalid field type. The struct was declared with the ability 'drop' so all fields require the ability 'drop'\n   \u2502             The type 'sui::object::UID' does not have the ability 'drop'\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- To satisfy the constraint, the 'drop' ability would need to be added here\n\nerror[E05001]: ability constraint not satisfied\n   \u250c\u2500 ./sources/temp_contract.move:19:13\n   \u2502\n19 \u2502         id: UID,             // Unique identifier for the NFT.\n   \u2502             ^^^\n   \u2502             \u2502\n   \u2502             Invalid field type. The struct was declared with the ability 'drop' so all fields require the ability 'drop'\n   \u2502             The type 'sui::object::UID' does not have the ability 'drop'\n   \u2502\n   \u250c\u2500 /Users/kz/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/object.move:69:15\n   \u2502\n69 \u2502 public struct UID has store {\n   \u2502               --- To satisfy the constraint, the 'drop' ability would need to be added here\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:36:45\n   \u2502\n36 \u2502     public entry fun mint(admin: &NFTAdmin, ctx: &mut TxContext, name: vector<u8>, description: vector<u8>, image_url: vector<u8>): NFT {\n   \u2502            -----                            ^^^  -------------- 'entry' parameters must be primitives (by-value), vectors of primitives, objects (by-reference or by-value), vectors of objects, or 'Receiving' arguments (by-reference or by-value)\n   \u2502            \u2502                                \u2502     \n   \u2502            \u2502                                Invalid 'entry' parameter type for parameter 'ctx'\n   \u2502            'mint' was declared 'entry' here\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:49:41\n   \u2502\n49 \u2502     public entry fun transfer(nft: NFT, ctx: &mut TxContext, new_owner: address): NFT {\n   \u2502                                         ^^^ Unused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:49:41\n   \u2502\n49 \u2502     public entry fun transfer(nft: NFT, ctx: &mut TxContext, new_owner: address): NFT {\n   \u2502            -----                        ^^^  -------------- 'entry' parameters must be primitives (by-value), vectors of primitives, objects (by-reference or by-value), vectors of objects, or 'Receiving' arguments (by-reference or by-value)\n   \u2502            \u2502                            \u2502     \n   \u2502            \u2502                            Invalid 'entry' parameter type for parameter 'ctx'\n   \u2502            'transfer' was declared 'entry' here\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:51:30\n   \u2502\n51 \u2502         let NFT { id, owner: old_owner, name, description, image_url } = nft;\n   \u2502                              ^^^^^^^^^ Unused local variable 'old_owner'. Consider removing or prefixing with an underscore: '_old_owner'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[Sui E01001]: invalid object construction\n   \u250c\u2500 ./sources/temp_contract.move:52:9\n   \u2502  \n52 \u2502 \u256d         NFT {\n53 \u2502 \u2502             id, // The UID is moved.\n   \u2502 \u2502             -- The UID must come directly from sui::object::new. Or for tests, it can come from sui::test_scenario::new_object\n54 \u2502 \u2502             owner: new_owner,\n55 \u2502 \u2502             name,\n56 \u2502 \u2502             description,\n57 \u2502 \u2502             image_url,\n58 \u2502 \u2502         }\n   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500^ Invalid object creation without a newly created UID.\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:62:48\n   \u2502\n62 \u2502     public entry fun update_metadata(nft: NFT, ctx: &mut TxContext, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>): NFT {\n   \u2502                                                ^^^ Unused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[Sui E02002]: invalid 'entry' function signature\n   \u250c\u2500 ./sources/temp_contract.move:62:48\n   \u2502\n62 \u2502     public entry fun update_metadata(nft: NFT, ctx: &mut TxContext, new_name: vector<u8>, new_description: vector<u8>, new_image_url: vector<u8>): NFT {\n   \u2502            -----                               ^^^  -------------- 'entry' parameters must be primitives (by-value), vectors of primitives, objects (by-reference or by-value), vectors of objects, or 'Receiving' arguments (by-reference or by-value)\n   \u2502            \u2502                                   \u2502     \n   \u2502            \u2502                                   Invalid 'entry' parameter type for parameter 'ctx'\n   \u2502            'update_metadata' was declared 'entry' here\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:64:36\n   \u2502\n64 \u2502         let NFT { id, owner, name: old_name, description: old_description, image_url: old_image_url } = nft;\n   \u2502                                    ^^^^^^^^ Unused local variable 'old_name'. Consider removing or prefixing with an underscore: '_old_name'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:64:59\n   \u2502\n64 \u2502         let NFT { id, owner, name: old_name, description: old_description, image_url: old_image_url } = nft;\n   \u2502                                                           ^^^^^^^^^^^^^^^ Unused local variable 'old_description'. Consider removing or prefixing with an underscore: '_old_description'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nwarning[W09002]: unused variable\n   \u250c\u2500 ./sources/temp_contract.move:64:87\n   \u2502\n64 \u2502         let NFT { id, owner, name: old_name, description: old_description, image_url: old_image_url } = nft;\n   \u2502                                                                                       ^^^^^^^^^^^^^ Unused local variable 'old_image_url'. Consider removing or prefixing with an underscore: '_old_image_url'\n   \u2502\n   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')\n\nerror[Sui E01001]: invalid object construction\n   \u250c\u2500 ./sources/temp_contract.move:66:9\n   \u2502  \n66 \u2502 \u256d         NFT {\n67 \u2502 \u2502             id,\n   \u2502 \u2502             -- The UID must come directly from sui::object::new. Or for tests, it can come from sui::test_scenario::new_object\n68 \u2502 \u2502             owner,\n69 \u2502 \u2502             name: new_name,\n70 \u2502 \u2502             description: new_description,\n71 \u2502 \u2502             image_url: new_image_url,\n72 \u2502 \u2502         }\n   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500^ Invalid object creation without a newly created UID.\n\n",
      "metadata": {
        "iteration": 6,
        "timestamp": 1740636036.822264,
        "error_stats": {
          "errors": 15,
          "compiler_warnings": 8,
          "linter_warnings": 0
        },
        "error_codes": {
          "W21002": {
            "count": 2,
            "message": "duplicate alias",
            "level": "Warning"
          },
          "N01005": {
            "count": 2,
            "message": "ability constraint not satisfied",
            "level": "NonblockingError"
          },
          "N02002": {
            "count": 3,
            "message": "invalid 'entry' function signature",
            "level": "NonblockingError"
          },
          "W02009": {
            "count": 6,
            "message": "unused variable",
            "level": "Warning"
          },
          "N01001": {
            "count": 2,
            "message": "invalid object construction",
            "level": "NonblockingError"
          }
        }
      }
    }
  ],
  "error_histogram": {
    "N04002": [
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "E02003": [
      1,
      0,
      1,
      0,
      0,
      0
    ],
    "W01009": [
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "W21002": [
      1,
      2,
      2,
      2,
      3,
      2
    ],
    "E03003": [
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "N02001": [
      2,
      2,
      2,
      2,
      0,
      0
    ],
    "N03001": [
      2,
      2,
      2,
      2,
      0,
      0
    ],
    "N07002": [
      1,
      0,
      0,
      1,
      0,
      0
    ],
    "N02002": [
      4,
      0,
      4,
      3,
      8,
      3
    ],
    "N03002": [
      4,
      0,
      0,
      0,
      0,
      0
    ],
    "W02009": [
      3,
      4,
      6,
      0,
      0,
      6
    ],
    "E06003": [
      4,
      2,
      6,
      1,
      2,
      0
    ],
    "E05003": [
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "N01005": [
      2,
      3,
      1,
      1,
      2,
      2
    ],
    "N15002": [
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "N01001": [
      0,
      0,
      0,
      0,
      0,
      2
    ]
  },
  "iterations_data": [
    {
      "iteration": 1,
      "total_errors": 28,
      "error_breakdown": {
        "N04002": {
          "count": 1,
          "message": "invalid 'module' declaration",
          "level": "NonblockingError"
        },
        "E02003": {
          "count": 1,
          "message": "unbound module",
          "level": "BlockingError"
        },
        "W01009": {
          "count": 1,
          "message": "unused alias",
          "level": "Warning"
        },
        "W21002": {
          "count": 1,
          "message": "duplicate alias",
          "level": "Warning"
        },
        "E03003": {
          "count": 1,
          "message": "unbound module member",
          "level": "BlockingError"
        },
        "N02001": {
          "count": 2,
          "message": "unexpected token",
          "level": "NonblockingError"
        },
        "N03001": {
          "count": 2,
          "message": "invalid modifier",
          "level": "NonblockingError"
        },
        "N07002": {
          "count": 1,
          "message": "invalid object declaration",
          "level": "NonblockingError"
        },
        "N02002": {
          "count": 4,
          "message": "invalid 'entry' function signature",
          "level": "NonblockingError"
        },
        "N03002": {
          "count": 4,
          "message": "invalid 'init' function",
          "level": "NonblockingError"
        },
        "W02009": {
          "count": 3,
          "message": "unused variable",
          "level": "Warning"
        },
        "E06003": {
          "count": 4,
          "message": "unexpected name in this position",
          "level": "BlockingError"
        },
        "E05003": {
          "count": 1,
          "message": "unbound unscoped name",
          "level": "BlockingError"
        },
        "N01005": {
          "count": 2,
          "message": "ability constraint not satisfied",
          "level": "NonblockingError"
        }
      }
    },
    {
      "iteration": 2,
      "total_errors": 15,
      "error_breakdown": {
        "W21002": {
          "count": 2,
          "message": "duplicate alias",
          "level": "Warning"
        },
        "N02001": {
          "count": 2,
          "message": "unexpected token",
          "level": "NonblockingError"
        },
        "N03001": {
          "count": 2,
          "message": "invalid modifier",
          "level": "NonblockingError"
        },
        "N01005": {
          "count": 3,
          "message": "ability constraint not satisfied",
          "level": "NonblockingError"
        },
        "W02009": {
          "count": 4,
          "message": "unused variable",
          "level": "Warning"
        },
        "E06003": {
          "count": 2,
          "message": "unexpected name in this position",
          "level": "BlockingError"
        }
      }
    },
    {
      "iteration": 3,
      "total_errors": 24,
      "error_breakdown": {
        "W21002": {
          "count": 2,
          "message": "duplicate alias",
          "level": "Warning"
        },
        "E02003": {
          "count": 1,
          "message": "unbound module",
          "level": "BlockingError"
        },
        "N02001": {
          "count": 2,
          "message": "unexpected token",
          "level": "NonblockingError"
        },
        "N03001": {
          "count": 2,
          "message": "invalid modifier",
          "level": "NonblockingError"
        },
        "N02002": {
          "count": 4,
          "message": "invalid 'entry' function signature",
          "level": "NonblockingError"
        },
        "W02009": {
          "count": 6,
          "message": "unused variable",
          "level": "Warning"
        },
        "E06003": {
          "count": 6,
          "message": "unexpected name in this position",
          "level": "BlockingError"
        },
        "N01005": {
          "count": 1,
          "message": "ability constraint not satisfied",
          "level": "NonblockingError"
        }
      }
    },
    {
      "iteration": 4,
      "total_errors": 12,
      "error_breakdown": {
        "W21002": {
          "count": 2,
          "message": "duplicate alias",
          "level": "Warning"
        },
        "N02001": {
          "count": 2,
          "message": "unexpected token",
          "level": "NonblockingError"
        },
        "N03001": {
          "count": 2,
          "message": "invalid modifier",
          "level": "NonblockingError"
        },
        "N07002": {
          "count": 1,
          "message": "invalid object declaration",
          "level": "NonblockingError"
        },
        "N01005": {
          "count": 1,
          "message": "ability constraint not satisfied",
          "level": "NonblockingError"
        },
        "N02002": {
          "count": 3,
          "message": "invalid 'entry' function signature",
          "level": "NonblockingError"
        },
        "E06003": {
          "count": 1,
          "message": "unexpected name in this position",
          "level": "BlockingError"
        }
      }
    },
    {
      "iteration": 5,
      "total_errors": 16,
      "error_breakdown": {
        "N15002": {
          "count": 1,
          "message": "invalid attribute",
          "level": "NonblockingError"
        },
        "W21002": {
          "count": 3,
          "message": "duplicate alias",
          "level": "Warning"
        },
        "N02002": {
          "count": 8,
          "message": "invalid 'entry' function signature",
          "level": "NonblockingError"
        },
        "E06003": {
          "count": 2,
          "message": "unexpected name in this position",
          "level": "BlockingError"
        },
        "N01005": {
          "count": 2,
          "message": "ability constraint not satisfied",
          "level": "NonblockingError"
        }
      }
    },
    {
      "iteration": 6,
      "total_errors": 15,
      "error_breakdown": {
        "W21002": {
          "count": 2,
          "message": "duplicate alias",
          "level": "Warning"
        },
        "N01005": {
          "count": 2,
          "message": "ability constraint not satisfied",
          "level": "NonblockingError"
        },
        "N02002": {
          "count": 3,
          "message": "invalid 'entry' function signature",
          "level": "NonblockingError"
        },
        "W02009": {
          "count": 6,
          "message": "unused variable",
          "level": "Warning"
        },
        "N01001": {
          "count": 2,
          "message": "invalid object construction",
          "level": "NonblockingError"
        }
      }
    }
  ],
  "total_iterations": 6
}